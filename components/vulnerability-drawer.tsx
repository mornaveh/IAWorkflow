"use client"

import type React from "react"

import { useState } from "react"
import {
  X,
  Copy,
  Calendar,
  ChevronDown,
  ChevronUp,
  Send,
  Trash2,
  XCircle,
  CheckCircle,
  User,
  MessageSquare,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useToast } from "@/hooks/use-toast"

interface VulnerabilityDrawerProps {
  vulnerability: any
  isOpen: boolean
  onClose: () => void
  onStatusUpdate: (vulnerabilityId: string, newStatus: string) => void
  onDeleteRequest: (vulnerabilityId: string) => void
}

interface Comment {
  id: string
  type: "comment" | "created" | "approved" | "rejected"
  author: string
  content: string
  timestamp: string
  status?: string
}

export function VulnerabilityDrawer({
  vulnerability,
  isOpen,
  onClose,
  onStatusUpdate,
  onDeleteRequest,
}: VulnerabilityDrawerProps) {
  const [activeTab, setActiveTab] = useState("details")
  const [comment, setComment] = useState("")
  const [ignoreReason, setIgnoreReason] = useState("This issue isn't a real vuln in this repo")
  const [expirationDate, setExpirationDate] = useState("Mar 15, 2025")
  const { toast } = useToast()

  // Initialize status and comments based on vulnerability status
  const getInitialData = () => {
    const baseComments: Comment[] = [
      {
        id: "1",
        type: "created",
        author: "Mor Naveh",
        content: 'Request to ignore until Mar 5, 2025: Not vulnerable\n"This issue isn\'t a real vuln"',
        timestamp: "APR 26 2025, 2:52 PM",
        status: "Pending",
      },
      {
        id: "2",
        type: "comment",
        author: "Karl Sabino",
        content: '"Hey, can you provide extra details here? Not clear enough"',
        timestamp: "APR 26 2025, 2:52 PM",
      },
      {
        id: "3",
        type: "comment",
        author: "Mor Naveh",
        content: '"Karl the structure of our code means that this isn\'t actually creating a vulnerability"',
        timestamp: "APR 26 2025, 2:52 PM",
      },
    ]

    // Add status-changing comment based on vulnerability status
    if (vulnerability?.status === "Approved") {
      baseComments.push({
        id: "4",
        type: "approved",
        author: "Karl Sabino",
        content: 'Approved request to ignore until Mar 5, 2025: Not vulnerable\n"Go forth and be happy!"',
        timestamp: "APR 26 2025, 2:52 PM",
        status: "Approved",
      })
      return { comments: baseComments, status: "Approved" }
    } else if (vulnerability?.status === "Rejected") {
      baseComments.push({
        id: "4",
        type: "rejected",
        author: "Karl Sabino",
        content:
          'Rejected request to ignore until Mar 5, 2025: Not vulnerable\n"Request rejected - insufficient justification"',
        timestamp: "APR 26 2025, 2:52 PM",
        status: "Rejected",
      })
      return { comments: baseComments, status: "Rejected" }
    }

    return { comments: baseComments, status: "Pending" }
  }

  const initialData = getInitialData()
  const [requestStatus, setRequestStatus] = useState(initialData.status)
  const [comments, setComments] = useState<Comment[]>(initialData.comments)

  const handleSubmitComment = () => {
    if (comment.trim()) {
      const newComment: Comment = {
        id: Date.now().toString(),
        type: "comment",
        author: "Current User",
        content: `"${comment.trim()}"`,
        timestamp: new Date()
          .toLocaleString("en-US", {
            month: "short",
            day: "numeric",
            year: "numeric",
            hour: "numeric",
            minute: "2-digit",
            hour12: true,
          })
          .toUpperCase(),
      }

      setComments((prev) => [...prev, newComment])
      setComment("")
      setActiveTab("comments")
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSubmitComment()
    }
  }

  const handleApprove = () => {
    const approvalComment: Comment = {
      id: Date.now().toString(),
      type: "approved",
      author: "Current User",
      content: 'Approved request to ignore until Mar 5, 2025: Not vulnerable\n"Request approved after review"',
      timestamp: new Date()
        .toLocaleString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "2-digit",
          hour12: true,
        })
        .toUpperCase(),
      status: "Approved",
    }

    setComments((prev) => [...prev, approvalComment])
    setRequestStatus("Approved")
    onStatusUpdate(vulnerability.id, "Approved")

    toast({
      title: "Request Approved",
      description: "The ignore request has been successfully approved.",
      variant: "default",
    })
  }

  const handleReject = () => {
    const rejectionComment: Comment = {
      id: Date.now().toString(),
      type: "rejected",
      author: "Current User",
      content:
        'Rejected request to ignore until Mar 5, 2025: Not vulnerable\n"Request rejected - insufficient justification"',
      timestamp: new Date()
        .toLocaleString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "2-digit",
          hour12: true,
        })
        .toUpperCase(),
      status: "Rejected",
    }

    setComments((prev) => [...prev, rejectionComment])
    setRequestStatus("Rejected")
    onStatusUpdate(vulnerability.id, "Rejected")

    toast({
      title: "Request Rejected",
      description: "The ignore request has been rejected.",
      variant: "destructive",
    })
  }

  const handleDelete = () => {
    onDeleteRequest(vulnerability.id)
    onClose()

    toast({
      title: "Request Deleted",
      description: "The ignore request has been permanently deleted.",
      variant: "destructive",
    })
  }

  const getActivityIcon = (type: string) => {
    switch (type) {
      case "created":
        return (
          <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-white text-xs">
            +
          </div>
        )
      case "comment":
        return <MessageSquare className="w-6 h-6 text-gray-500" />
      case "approved":
        return (
          <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-xs">✓</div>
        )
      case "rejected":
        return (
          <div className="w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-white text-xs">✕</div>
        )
      default:
        return <User className="w-6 h-6 text-gray-500" />
    }
  }

  const getActivityTitle = (comment: Comment) => {
    switch (comment.type) {
      case "created":
        return `${comment.author} created a request`
      case "comment":
        return `${comment.author} commented`
      case "approved":
        return `${comment.author} approved the request`
      case "rejected":
        return `${comment.author} rejected the request`
      default:
        return `${comment.author} updated`
    }
  }

  if (!isOpen) return null

  return (
    <>
      {/* Backdrop */}
      <div className="fixed inset-0 bg-black bg-opacity-50 z-40" onClick={onClose} />

      {/* Drawer */}
      <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-xl z-50 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-white text-xs">
                D
              </div>
              <span className="font-medium text-sm">REQUEST TO IGNORE BY DEVELOPERNAME</span>
              <Badge
                variant="outline"
                className={`text-xs ${
                  requestStatus === "Pending"
                    ? "text-orange-600 border-orange-200"
                    : requestStatus === "Approved"
                      ? "text-green-600 border-green-200"
                      : "text-red-600 border-red-200"
                }`}
              >
                {requestStatus}
              </Badge>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-4 h-4" />
            </Button>
          </div>

          {/* Tabs */}
          <div className="flex gap-1">
            <Button
              variant={activeTab === "details" ? "default" : "ghost"}
              size="sm"
              onClick={() => setActiveTab("details")}
              className={activeTab === "details" ? "bg-blue-100 text-blue-700 hover:bg-blue-100" : ""}
            >
              Request details
            </Button>
            <Button
              variant={activeTab === "comments" ? "default" : "ghost"}
              size="sm"
              onClick={() => setActiveTab("comments")}
              className={`relative ${activeTab === "comments" ? "bg-blue-100 text-blue-700 hover:bg-blue-100" : ""}`}
            >
              Comments
              <div className="w-2 h-2 bg-red-500 rounded-full absolute -top-1 -right-1"></div>
            </Button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-4">
          {activeTab === "details" && (
            <div className="space-y-6">
              {/* REQUEST Section */}
              <div>
                <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-4">REQUEST</h3>
                <div className="space-y-4">
                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Request Id</label>
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-mono">b32eff9f-3049-44ec-a537-c2491339004a</span>
                      <Copy className="w-3 h-3 text-gray-400 cursor-pointer" />
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Request from source</label>
                    <span className="text-sm">Snyk Web UI</span>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Requested date</label>
                    <span className="text-sm">August 8 2024, 2:23 PM</span>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Requested by</label>
                    <div className="flex items-center gap-2">
                      <div className="w-5 h-5 bg-purple-500 rounded-full flex items-center justify-center text-white text-xs">
                        D
                      </div>
                      <span className="text-sm">DeveloperName</span>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Ignore reason</label>
                    <Input value={ignoreReason} onChange={(e) => setIgnoreReason(e.target.value)} className="text-sm" />
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Ignore type</label>
                    <Select defaultValue="not-vulnerable">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="not-vulnerable">Not vulnerable</SelectItem>
                        <SelectItem value="wont-fix">Won't fix</SelectItem>
                        <SelectItem value="false-positive">False positive</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Expiration</label>
                    <div className="flex gap-2">
                      <Select defaultValue="custom">
                        <SelectTrigger className="w-24">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="custom">Custom</SelectItem>
                          <SelectItem value="never">Never</SelectItem>
                        </SelectContent>
                      </Select>
                      <div className="flex items-center gap-2 flex-1">
                        <Calendar className="w-4 h-4 text-gray-400" />
                        <Input
                          value={expirationDate}
                          onChange={(e) => setExpirationDate(e.target.value)}
                          className="text-sm"
                        />
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Assignee</label>
                    <Select defaultValue="john">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="john">
                          <div className="flex items-center gap-2">
                            <div className="w-4 h-4 bg-red-500 rounded-full flex items-center justify-center text-white text-xs">
                              J
                            </div>
                            John Lin
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              {/* VULNERABILITY Section */}
              <div>
                <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-4">VULNERABILITY</h3>
                <div className="space-y-4">
                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Title</label>
                    <div className="flex items-center gap-2">
                      <Badge className="bg-red-500 text-white w-5 h-5 rounded-full p-0 flex items-center justify-center text-xs">
                        C
                      </Badge>
                      <span className="text-sm">{vulnerability.vulnerability}</span>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Details</label>
                    <div className="text-sm text-gray-700">
                      <p>Vulnerability is inflight 1.0.6. No remediation available yet.</p>
                      <a href="#" className="text-blue-600 hover:underline">
                        More information
                      </a>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Vulnerability information</label>
                    <a href="#" className="text-blue-600 hover:underline text-sm">
                      {vulnerability.cwe}
                    </a>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Repository</label>
                    <div className="flex items-center gap-2">
                      <span className="text-sm">{vulnerability.repository}</span>
                      <Copy className="w-3 h-3 text-gray-400 cursor-pointer" />
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Branch</label>
                    <div className="flex items-center gap-2">
                      <span className="text-sm">fullbranchname/abc/branchname</span>
                      <Copy className="w-3 h-3 text-gray-400 cursor-pointer" />
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Location</label>
                    <div className="flex items-center gap-2">
                      <span className="text-sm">org/repo/package.json</span>
                      <Copy className="w-3 h-3 text-gray-400 cursor-pointer" />
                    </div>
                  </div>

                  <div>
                    <label className="text-sm text-gray-600 block mb-1">Vulnerability line number</label>
                    <span className="text-sm">243</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === "comments" && (
            <div className="space-y-4">
              {comments.map((commentItem, index) => (
                <div key={commentItem.id} className="flex gap-3">
                  <div className="flex-shrink-0 mt-1">{getActivityIcon(commentItem.type)}</div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-sm font-medium text-gray-900">{getActivityTitle(commentItem)}</span>
                      {commentItem.status && (
                        <Badge
                          variant="outline"
                          className={`text-xs ${
                            commentItem.status === "Pending"
                              ? "text-orange-600 border-orange-200"
                              : commentItem.status === "Approved"
                                ? "text-green-600 border-green-200"
                                : "text-red-600 border-red-200"
                          }`}
                        >
                          {commentItem.status}
                        </Badge>
                      )}
                    </div>
                    <div className="text-sm text-gray-700 whitespace-pre-wrap mb-2">{commentItem.content}</div>
                    <div className="text-xs text-gray-500">{commentItem.timestamp}</div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-4 border-t space-y-3">
          <div className="flex gap-2">
            <Textarea
              placeholder="Type a comment"
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              onKeyPress={handleKeyPress}
              className="flex-1 min-h-[40px] resize-none"
            />
            <Button size="sm" className="self-end" onClick={handleSubmitComment}>
              <Send className="w-4 h-4" />
            </Button>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex gap-1">
              <Button variant="outline" size="sm">
                <ChevronUp className="w-4 h-4" />
              </Button>
              <Button variant="outline" size="sm">
                <ChevronDown className="w-4 h-4" />
              </Button>
            </div>

            <div className="flex gap-2">
              <Button variant="outline" size="sm" onClick={handleDelete}>
                <Trash2 className="w-4 h-4 mr-1" />
                Delete request
              </Button>
              <Button variant="outline" size="sm" onClick={handleReject} disabled={requestStatus !== "Pending"}>
                <XCircle className="w-4 h-4 mr-1" />
                Reject
              </Button>
              <Button size="sm" onClick={handleApprove} disabled={requestStatus !== "Pending"}>
                <CheckCircle className="w-4 h-4 mr-1" />
                Approve
              </Button>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}
